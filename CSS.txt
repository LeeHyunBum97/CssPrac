오페라 브라우저가 HTML5와 CSS3를 가장 잘 지원한다.

HTML문서에 시각적인 효과를 부여하기 위한 언어인 CSS 작성방법
CSS적용 방식은 3가지로 외부 문석 작성, 내부 문서에 별도 영역에 작성, 가가 태그안에 직접 적용 하는 것이 있으며
그중 외부에 별도로 작성하는 것을 가장 권장한다, 태그안에 적용하는 것은 매우 지양

<속도나 가독성의 중요성 혹은 사용되는 빈도에 따라 바꿔서 적용한다.>
1. 별도의 파일에 작성하고 가져와서 사용
2. HTML 문서안에 <style></style>영역을 만들어 작성
3. 적용할 태그에서 style속성을 이용해 작성

실행방식 
HTML 코드나 JS코드를 전부 읽어 구조를 만든 이후에 적용한다, 스타일 시트는 작성 위치에 상관없이 동작한다

기본 선택자
1. * : 전체요소
2. tag이름 : 
3. .class이름 : 여러 요소를 그룹화하기 위해서 사용하고 대부분 스타일 적용에 사용된다.
4. #id : 문서 내에서 구별하기 위해서 사용되며, 대부분 JS에서 사용된다.

속성 선택자

<속성 이름 일치>
선택자[속성이름]: 선택자 안에 속성이 존재하는 경우만 적용
<a href="https://wwww.kakao.com>카카오</a>
<a>카카오</a>
위와 같을 때 a[href] : {}는 a태그의 href 속성을 가진 태그에만 style적용

<전체 일치>
선택자[속성이름="값"]:{}의 형식에는 해당 선택자의 속성을 가지고 값 또한 일치하는 것에만 style적용

<부분일치>
선택자[속성이름^="값"] : {}에서는 속성 값이 해당 값으로 시작하는 경우에만 적용
선택자[속성이름$="값"] : {}에서는 속성 값이 해당 값으로 끝나는 경우에만 적용
선택자[속성이름*="값"] : {}에서는 속성 값이 해당 값으로 포함되는 경우에 모두 적용

<복합선택자>
1. 일치 선택자 : 선택자1선택자2선택자3....
                공백없이 여러 선택자를 나열하면 모든 선택자가 일치해야 한다.
                div.content{} -> div 태그 중 class속성이 content인 경우에 적용

2. 자식 선택자 : 선택자1 > 선택자2
                선택자1에 포함된 선택자2인데 선택자2가 바로 아래 래벨에 있어야 한다.
                <div><span></span></div>
                <div><ul><span></span></ul></div>
                위 두줄의 태그 예시에서 div > span과 같은 형태로 Css를 적용시키면 위의 경우에만 적용되는 형태

3. 하위 선택자 : 선택자1 선택자2 선택자3 
                공백을 이용해 선택자를 나열하는 것으로 선택자2가 선택자1에 포함되어 있으면 적용
                div span 으로 작성하면 
                <div><span></span></div>
                <div><ul><span></span></ul></div>의 예시가 있을 때 포함하는 레벨에 상관없이 모두에게 적용된다.

4. 인접 형제 선택자 : 선택자1 + 선택자2 
                     선택자1과 동일한 레벨에서 다음에 나오는 선택자2에 적용한다.
                     <h1>대제목</h1>
                     <h2>제목1</h2>
                     <h2>제목2</h2>
                     에서 h1 + h2로 선택자를 설정한 경우 제목1에만 Style이 적용되는 것(제목2는 h2다음에 오는 것으로 해당X)

5. 형제 선택자 : 선택자1 ~ 선택자2
                 h1 ~ h2와 같을 때 h1과 동등한 레벨에 있는 모든 h2에 적용(들여쓰기 레벨 기준)
                 많이 사용되지는 않는다.
                 큰 제목 옆에 연달아 나오는 작은 제목을 강조하는 경우 정도에만 사용

6. 그룹 선택자 : ,로 구분
                ,와 나열을 하게 되면 나열된 선택자 중에 포함되면 Style이 적용된다.

선택자를 사용하는 방법은 다양하나 본인이 익숙한 것을 먼저 사용해서 수정하고 작업하는 것으로 일단 먼저 구현해라
내가 FE개발을 할 것은 아니나 결과물을 도출하기 때문

<의사 선택자>_아이디나 태그 이름 뒤에 온다
1. pseudo-classes selector : 선택자 뒤에 :을 하고 작성
                             link를 기준으로 다음과 같은 경우가 있음link, visited
                             예시로, a:link 와 같은 경우 모든 link에 Style을 적용
                             a:visited는 link에 한 번이라도 누는 경우 적용한다.

                             동작을 기준으로
                             hover : 마우스가 올라오면(유튜브 미리보기), active(입력이 감지 되었을 때), focus(input에 포커스 될 때)

                             UI요소를 기준으로 checked, enable, disabled

<구조 관련 선택자> _ 아이디와 태그이름 뒤에 사용하게 되면 찾아만 보기
root
first-child, last-child
nth-last-child
nth-child(n)
only-child
not(선택자)
empty
first-line, first-letter
nth-of-type(n), first-of-type(n), last-of-type(n), only-of-type(n)

<언어 기준 선택자> _ 아이디와 태그이름 뒤에 온다
lang(languagecode): 특정언어 설정에만 style을 적용
                    언어코드 2자리-국가코드 2자리 -> ko-KR, en-US ....

<의사 요소 선택자>
pseudo-element
::first-letter
::first-line
::before
::after
::selection

<스타일 상속>
하위 요소가 상위 요소의 값을 물려받는지 여부
속성별로 다르게 적용되는데 폰트 관련된 속성은 대부분 상속된다.
어떤 속성이 상속되지 않는 경우 상속을 받고자 하면 inherit으로 값을 설정하면 된다.

<스타일 적용 우선순위>
하나의 요소에 동일한 속성의 값을 2개 이상 적용하는 경우 충돌이 발생한다.
마지막에 적용된 요소가 우선순위를 갖게 된다.
태그 안에서 작성된 Style이 우선 순위가 가장 높다.
외부 파일과 작성한 것과 <style></style>태그를 문서안에 따로 작성한 것은 나중에 작성된 것이 우선순위가 더 높다
동일한 방식으로 작성된 경우에 특정도를 가지고 우선순위를 결정한다.
-> inline(태그안에) : 특정도 1000, id선택자 : 특정도 100, .class선택자 : 특정도10, 가상 클래스 : 특정도 10, 가상요소 : 특정도 1, 태그 선택자 : 특정도 1

<스타일 단위>
1. 절대 단위 : 불변의 단위
-cm
-mm
-in
-px : 픽셀로 1/96인치로 해상도 같은 것을 표현할 때 사용되는 단위 -> 1920*1024라면 가로로 점을 1920, 세로로 1024개 출력할 수 있다는 의미
      화면의 확대 축소에 따라 변할 수 있기 때문에 상대 단위라고 하기도 한다.
-pt : 1/72인치
-pc : 12pt

2. 상대 단위 : 화면의 크기나 디바이스 크기에 따라 다르게 적용
-px
-%
-em : font-size가 기준으로 글꼴 크기가 16px라면 1em은 16px 즉 글꼴 사이즈가 해당 단위의 기준, rem은 최상위 요소의 글꼴 크기
      주변의 글자 보다 크기가 1.5배가 되게 만들려면 1.5em과 같이 적용한다.
-vw(화면의 가로 크기를 100으로 설정), vh(화면의 세로 크기를 100으로), vmin(가로나 세로중 더 적은 것을 100으로), vmax(둘 중 더 큰 것을 100으로)
-ex : 소문자 x의 높이로 em의 절반에 해당
-ch : 숫자 0의 넓이

P.S 각도를 설정하는 단위
- deg, rad(라디안)

@ 요즘 디바이스 크기가 다양하기 때문에 화면 출력시 상대단위를 사용하는 것을 권장하고 규격이 정해진 인쇄용을 만들 때는 절대 단위를 사용한다.
@ 크기에 대한 단위로는 em이 가장 많이 사용되고 있다.

<Typography_문자나 기호에 Style을 적용하는 것>
1. font-family
   font-family: 폰트 나열과 같은 형식으로 적용하며 첫 번째 폰트가 없을 때 뒤의 폰트를 적용하기 위해서 나열하는 것
   font-family: 돋움 일때, 돋움이 없다면 그냥 window기본 폰트가 적용된다.
   그렇기 때문에 font-family: 돋움, sans-serif와 같이 돋움이 없는 경우 sans-serif의 글꼴이 적용되도록 하는 것이 보다 바람직하다.

2. @font-face : [@font-face: 글꼴]과 같이 사용하면 해당 글꼴이 없는 경우 다운로드 까지 받게 해준다.
                @font-face{
                    font-family: 글꼴이름
                    src:url(글꼴파일의 경로) format(파일유형)
                }
                과 같이 선언하면 해당 글꼴이 없는 경우 설정된 url에서 지정된 포맷으로 글꼴을 받아와서 적용시킨다.
                주의할 점은 아무 글꼴이나 사용하면 고소장 날라온당, 오픈된 것만 사용하는 것이 안전
                P.S 네이버 기사 같으거 긁어오면 돈줘야됨

3. font-size : 글꼴 크기로 키워드(xx-samll, x-small, small, medium, large, x-large, xx-large, smaller, lager..)로 설정할 수 있고 
               직접 단위 설정이 가능하나 em단위로 설정하는 것을 권장한다.

4. font-weight : 글자의 두께를 설정하는 것으로 100부터 900까지 단위로도 설정가능하며,
                 normal, bold, bolder, lighter와 같은 키워드로도 설정이 가능하다.

5. font-style : italic(글자 기울임)

6. font-variant : small-caps로 설정하면 소문자를 작은 대문자로 변형

7. font : 앞의 여섯가지를 한번에 적용하기 위해서 사용
          font: weight style variant size line-height, font-family와 같이 적용
          P.S font-family가 마지막에 오는 이유는 나열할 수 있기 때문에, 모든 나열 가능한 요소가 대체로 이렇다.
          다른 모든 속성은 모두 생략 가능하지만 font-size와 font-family는 생략이 불가능하다.

8. color : 요소의 전경 색상 적용이라 하나 대부분 글자에만 적용된다.
           색을 의미하는 키워드로 설정할 수 있고, 16진수 6자리, rgb(0~255)의 숫자 3개 나열혹은 백분율 3개 나열
           rgba를 사용하면 투명도도 설정 가능하고 hsl도 이에 해당된다.
           색상 키워드는 https://www.learningwebdesign.com/colornames.html
           색상 추출은 https://webfx.com/web-design/color-picker/에서 할 수 있으나 VSC에서는 색상 추출 기능을 코드 센스로 제공한다.

9. text-decoration : 밑줄이나 취소선 등의 효과를 설정한다
                     none, underline, overline, line-through, blink 등으로 설정
                     a 태그를 이용하면 자동으로 밑줄이 생기는데 이에 none을 적용해 없애는 경우가 있음
                     또한 요즘은 a태그 밑줄 보다는 색이나 두께를 변경해서 알려주는 것을 권장하고
                     일반 텍스트 강조시 underline을 설정하지 않고 italic으로 기울임 설정하는 것을 권장하고 있다.

10. text-tranceform : 영문의 대소문자를 변환하도록 설정한다
                      none, uppercase, lowercase, capitalize(첫글자만 전환)등의 키워드를 이용한다,

11. white-space : 공백문자를 설정한다
                  normal : 여러개의 공백을 하나로 처리한다.
                  nowrap : 여러 공백을 하나로 처리하고 영역넓이를 넘어가면 줄 바꿈하지 않고 한줄에 표시
                  pre : 여러 공백을 그대로 처리하고 영역넓이를 넘어가면 줄 바꿈하지 않고 한줄에 표시
                  pre-wrap : 여러 공백을 그대로 처리하고 영역넓이를 넘어가면 줄 바꿈해서 표시
                  pre-line : 여러 공백을 하나로 처리하고 영역 넓이를 넘어가면 줄 바꿈해서 표시

12. text-shadow : 글자에 그림자 효과, Css3에서 추가된 속성이라서 구형 브라우저에서는 적용이 안된다.
                  모바일 브라우저에서는 지양한다, 렌더링 속도에 영향
                  수평 오프셋, 수직 오프셋, 흐릿해지는 반경, 색상 순으로 설정한다.(단위, 단위, 단위, 색상)
                  수평/수직 오프셋이 일치하게 한다면 하나만 설정한다(오프셋이란 거리를 의마한다고 생각)
                  4가지 속성을 모두 나열한 후 ,를 하고 다시 나열해서 설정하면 여러개 적용이 가능하다
                  -> 글자에 여러 효과를 주기위해 포토샵과 같은 외부프로그램을 이용하는 것을 자제시키기 위해 등장했다.

<Paragraph_문단관련 속성>
1. text-align : 문단의 가로 정렬, 셀이나 인라인 요소에 적용할 때는 내용보다 넓이가 더 커야한다.
                start, end, left, center, right, justify(문단의 시작을 왼쪽에 끝을 오른쪽에 맞춰 여백을 조정한다.)

2. text-justify : text-align에 justify를 적용했을 때 공백을 조절한다.
                  auto: 웹 브라우저가 조절한다
                  none: 정렬하지 않는다.
                  inter-word : 단어 사이의 공백을 조절한다.
                  distribute : 글자 사이의 공백을 조절한다.

3. text-indent : 첫 줄 들여쓰기, 양수를 설정하면 들여쓰기가 되고 음수를 설정하면 내어 쓰기가 적용된다.

4. letter-spacing : 문자 사이의 간격

5. line-height : 문단의 행과 행 사이의 간격(줄 간격과 비슷하다)

6. word-break : 줄 바꿈 옵션
                keep-all 을 설정하면 단어 단위로 줄 바꿈을 적용한다.(공백 발생시 줄 바꿈)

7. direction : rtl을 설정하면 오른쪽에서 왼쪽으로 글을 출력한다(아랍어)

8. vertical-align : 인라인 요소끼리의 세로 위치를 설정한다.
                    sub, super, top, text-top, middle, bottom, text-bottom
                    주로 이미지 주위에 텍스트를 배치할 때 많이 사용한다.

<list 관련속성>
1. list-style-type : 목록의 머리 부분 설정
                    none, disc, circle, square, decimal, decimal-leading-zero, upper-alpha, lower-alpha, upper-roman, lower-roman
                    upper-latin, lower-latin, lower-greek, armenian, georgin, katakana, hiragana

2. list-style-image : 이미지 파일을 마커로 사용, URL(이미지 파일 경로)

3. list-style-position : 마커의 위치 inside/outside  설정가능

4. list-style 3가지를 동시에 설정 가능한데 이 경우는 type, position, image 순으로 작성

<배경에 관련된 속성>
1. background-color : 배경색으로 color와 같은 방식으로 설정할 수 있다.

2. background-image : 배경 이미지를 설정하는 것으로 URL경로
                      ,를 이용해 여러개 적용 가능하고 순서대로 적용된다.

3. background-repeat : 이미지의 반복을 설정한다
                       이미지가 배경보다 작을 때 사용된다.
                       rpeat, repeat-x, repeat-y, no-repeat 설정 가능

4. background-position : 이미지가 배경보다 작을 때 적용되며,
                        left, right, center, top, bottom, 직접 숫자 입력이 가능하다

5. background-attachment : 스크롤 할 때 이미지 이동의 여부
                           fixed를 설정하면 이미지 공정이 되고 scroll로 설정하면 배경 이미지도 따라서 Scroll된다.

6. background-size : 배경 이미지의 크기를 의미한다.
                     auto - 원본 이미지 크기 그대로 출력
                     숫자 1개 - 넓이에 대한 숫자이고 높이는 auto로 출력
                     숫자 2개 - 넓이와 높이를 숫자 두개에 대응해 출력
                     cover - 넓이와 높이 비율을 맞춰 확대하거나 축소하는데 큰 값을 적용한다.
                     contain - 넓이와 높이 비융을 맞춰 확대하거나 축소하는데 작은 값을 적용한다.

7. background-clip : 적용범위
                     border-box : 테두리까지 적용
                     padding-box : 테두리 제외하고 적용
                     content-box : content에만 적용

8. background : color, image, 반복여부, position, attachment를 한꺼번에 적용하기 위한 속성이다.

<gradation> : Css3부터 지원하는 것으로 여러 색상을 혼합해서 사용하는 속성
1. vedor-prefix : Css3의 기능 중에는 표준으로 채택되지 않아서 브라우저 별로 별도로 기능을 제공할 때 사용하는 기호
                  사파리/크롬은 -webkit-을 추가
                  파이어폭스는 -moz-를 추가
                  MS 브라우저는  -ms-를 추가
                  오페라 브라우저는 -o-를 추가
                  -> Css3 는 현재에도 표준을 계속 추가하고 있기 때문에 vendor prefix를 이용하는 기능 중에는 최신 브라우저를 사용하면
                     vendor-prefix를 생략해도 되는 경우가 있음 Css나 스크립트 계열은 브라우저들이 쓰는 거에 따라서 표준을 채택하기 때문

2. linear-gradation : 선형 그라데이션으로 
                      linear-gradation(각도, 색상값을 나열)

3. radial-gradation : 원형 그라데이션으로
                      radial-gradation(시작점의 위치, circle의 모양, 색상나열)

==> 그라데이션을 직접 생성하는 것은 쉽지않아 http://www.colorzilla.com/gradient-editor/ 에서 모양을 만든 후 코드를 복사해 사용하는 것이 편리함

<Box Model_영역에 대한 설정>
- width : 콘텐츠 영역의 넓이
- height : 콘텐츠 영역의 높이
- border : 경계선
- margin : 경계선과 콘텐츠 사이 여백
- padding : 영역과 영역 사이의 여백

1. IE의 호환 모드 :  IE의 하위 버전들은 padding을 width, height에 포함시켜서 계산
                    width : 100px
                    height : 100px
                    padding : 30px
                    일반 브라우저들은 160px를 확보해서 표시되지만 IE하위버전은 100px 만을 확보해서 표시되지만

2. margin collapsing (마진겹침) : 연속배치된 요소들에 마진을 전부 설정하면 마진은 중복 적용되지 않고 큰 값 1개만을 적용한다

3.box-sizing : box의 크기를 설정할 때 기준을 정하는 것으로 content-box를 설정하면 내용을 기준으로 box크기를 설정하고 border-box를 설정하면 
               경계선을 기준으로 한다.

4. 크기 설정 : width, height을 가지고 설정하며,
              추가적으로 max-height, min-height, max-width, min-width을 이용해 최대 및 최소 크기를 설정하는 것이 가능하다.

5. 여백 설정 : padding과 margin으로 설정하며,
              padding이나 margin에 하나의 숫자를 설정하면 좌우상하에 동일하게 적용된다,
              상하좌우를 따로 설정하고자 하면 -left, -right, -top, -bottom을 이용해서 설정

6. visibility : 요소의 내용을 숨기거나 표시하고자 할 때 사용하는 속성
                visible, hidden, collapse로 설정

7. overflow : 내용이 영역보다 큰 경우의 옵션 설정으로,
              visible, hidden, scroll로, auto가 있음

8. text-overflow : 텍스트가 영역보다 긴 경우의 옵션으로 clip(내용을 잘라서 보이지 않음), ellipse(...을 표시)를 설정할 수 있음
                   최근에는 텍스트가 영역보다 큰 경우 더보기 버튼 같은 거들을 만들어서 출력하는 경우가 많다.
                   페이스북 앱은 내용이 많은 경우 ...과 더보기 기능을 제공해서 더보기를 누르면 아래로 펼쳐지는 형태로 디자인을 하는데
                   이러한 디자인을 카드형 레이아웃이라고 부른다.
                   ==> OverFlow.html과 같은 형식의 디자인이 강력한 편

9. floating : 블록요소 주위에는 다른 요소가 올 수 없으나,
              블록요소 주위에 다른 요소를 배치하고자 할 때는 블록 요소를 inline 요소로 변경하거나 float속성을 이용해 영역은 차지하되
              공중에 떠 있는 형태로 만들어서 할 수 있다.
              left, right, none을 설정할 수 있다.
             
              또한 inline요소에도 float속성을 적용할 수 있는데 그렇게 되면 width와 height를 설정하는 것이 좋은데 설정하지 않으면
              콘텐츠를 표시하는 영역이 최대한 확장이 되어버린다.

              float 속성이 적용된 상태에서 해제하는 방법
              clear 속성에 none, left, right, both를 설정해서 해제 -> 블록요소에서만 가능
              overflow 속성에 auto나 hidden을 설정해서 해제 -> 부모요소에 설정_float 속성을 부모 요소에 설정해서 해제하는것 

10. 크기 조절 : resize 속성에 horizontal이나 vertical, both를 설정해서 크기 조절이 가능하도록 할 수 있음

11. 그림자 설정 : box-shadow 수평오프셋, 수직오프셋 흐릿함과 확산정도 색상으로 설정
                 수평 오프셋 앞에 inset을 설정하면 그림자가 내용 안으로 출력된다.
             
12. 경계선 설정
- border-style : 경계선의 모양으로 none, dotted, dashed, solid, double, groove, ridge, inset, outset을 설정
                 그냥 사용하면 상하좌우 경계선이 모두 동일한 모양이 되고 방향 별로 다르게 설정하고자 한다면 
                 border-left-style, border-right-style, border-top-style, border-bottom-style로 설정

- border-width : 경계선의 두께로 thin, medium, thick 으로 설정할 수 있고 값과 단위를 직접 지정할 수 있으며, 마찬가지로 방향별 지정가능

- border-color : 경계선의 색상

- border : 두께, 종류, 색상을 한꺼번에 설정

- border-radius : 경계선에 라운드 효과를 설정하는 속성으로
                  Css3에서 추가된 속성이다,
                  값을 하나만 설정해서 상하좌우 모두 동일한 값으로 적용가능하고 숫자 4개를 설정해 상하좌우를 다르게 설정하는 것도 가능하며
                  ,로 구분하고 다시 설정해 여러개의 값을 지정할 수 있다.

- image-border : border에 이미지를 설정할 수 있다
                 border-image-source:url(이미지경로) 로 설정.
                 border-image-slice: 값 4개 와 같은 형식으로 잘라내기 설정
                 border-image-repeat: stach, repeat, round, space중 하나의 값을 설정해 반복여부 지정
                 border-image-width: 숫자 와 같은 형식으로 두께 설정
                 border-image-outset: 숫자 와 같은 형식으로 경계선과의 거리를 조정

- display : 박스의 보기 모드를 변경
            block : 블록요소로 만들어짐
            inline : 인라인요소로 만들어지는데 height가 무시된다.
            inline-block : 인라인 요소로 만드는데 주위에 컨텐츠가 배치되지 않고 height가 적용된다.

13. opacity : 불투명도 설정으로 0과 1사이의 소수로 설정하며 1이면 100% 불투명, 0이면 투명을 의미한다.

14. position : 요소의 배치 방법을 설정하는 것으로, 기본값은 static 을 갖는다.

- static : 위치 기준이 없는 것으로 순서대로 배치한다, left, top, right..등을 설정할 수 없음

- relative : 이전에 출력된 내용과의 관계를 이용해서 출력되는데 이 경우에는 left나 top을 이용해 이전 내용과의 거리를 설정
             상대적으로 적용되는 것이 아니므로 다른 태그영역과 겹치거나 빈영역이 발생할 수 있다.

- absolute : 부모의 좌측 상단을 기준으로 배치된다, 역시 left나 top을 이용해서 부모에서의 위치를 설정
             해당 속성을 적용할 부모 태그는 해당 태그를 감싸고 있는 것 중 position 속성이 적용된 것을 부모로 인식하고
             그 중 position값을 static값으로 가지고 있다면 부모로 취급하지 않는다.

- fixed : 웹 브라우저의 스크린 기준으로 배치되는 방식
          즉, 스크롤 시 움직이지 않는 요소들을 배치한다 ex> 최상단 바, 광고베너, 간단한 메뉴

- sticky : Scroll영역을 기준으로 배치된다, 

==> absolute나 fixed를 설정하면 그 요소의 display는 block으로 자동 변경된다.
    위치자체는 left, top, right, bottom을 이용해서 위치를 지정하나 static에서는 사용되지 않는다.

15. z-index : 겹쳐서 출력되는 태그 영역들의 우선순위를 결정하고 클 수록 위로 배치된다.

16. flex_PPT참고 @요즘은 table보다는 flex혹은 gird를 이용해 보통 요소들의 위치를 배치한다. -> 모바일 앱과 웹 앱의 설계 일치 지향

17. display:flex : 하나의 컨테이너를 생성해서 요소들을 가로나 세로 방향으로 배치하는 레이아웃
                   보통 모바일 웹에서 가로 방향으로 요소들을 배치해 가득 채우고자 할 때 사용
                   정렬 방법이나 크기 방법등을 설정해서 사용한다.
                   이를 flex rayout이라고 따로 부르는 경우도 있음

18. 다단 : 가로 화면을 여러개로 분할해 컨텐츠를 배치하는 것으로 모바일에서는 가독성 문제로 사용하지 않는다, 
           모바일은 가로는 가득 채우고 세로로 스크롤 할 수 있도록 만들기 때문에 내용이 많으면 세로 방향으로 스크롤 하도록 해서 출력한다.

19. Table

- Table관련 display 속성

  table, inline-table, table-row, table-row-group, table-header-group, table-footer-group, table-column, table-column-group
  table-cell, table-caption, list-item 등이 있다.
  => 예전에 많이 사용되었으나 현재는 잘 사용하지 않는다.

[클라이언트-서버 애플리케이션 제작 방법]

1) 클라이언트가 서버에 요청을 하면 서버가 요청을 처리하고 그 결과를 출력할 수 있는 뷰 화면을 만들어서 클라이언트에게 뷰 화면을 전송하는 형태
   뷰 화면을 템플릿 엔진을 이용해 생성 -> JSP
   서버의 처리가 많아짐

2) 클라이언트가 서버에 요청 했을 때 서버가 요청을 처리하고 결과를 클라이언트에게 전송하면 클라이언트가 이 데이터를 바탕으로 해석해 출력 화면을
   만들어내는 형태.
   클라이언트 애플리케이션과 서버 애플리케이션을 따로 제작해야 한다.
   서버 처리를 줄이기 위해 클라이언트가 화면을 응답을 기반으로 만들어 내는 것 -> React & Node/ SpringBoot
   
   전자보다 효율이 좋다
   
   스마트 폰의 보급으로 UI환경에 맞춰 똑같은 서비스를 제공하는데 있어서 모바일이나 여타 기기에 맞는 Server단을 다시 만들 필요가 없어서
   예기치 못한 문제를 제거할 수 있다.
   
   그렇다면 서로다른 애플리케이션인 클라이언트와 서버간의 통신 표준이 필요한데 XML이 가장 먼저 사용되었다.
   - XML : 태그 형태로 데이터를 작성하는데 개발자가 하며 인간이 알아보기는 쉬우나 사이즈가 매우크다.
   - JSON : JS 객체 표현 방법으로 데이터를 작성, 인간이 알아보기 어려우나 사이즈가 작다 -> 스마트 폰에 매우 적합
            하지만 요즘은 json포맷을 사용
   - 위 외에도 csv(구분 기호를 이용해서 구분한 텍스트)가 있므며 내용이 변하지 않는 데이터에 적용가능하고
     즉 과거의 특정한 이벤트에 대한 조사율 등의 변하지 않는 데이터에 적용

   - yaml(야믈) : 이메일 작성 형태로 데이터를 제공, 설정에서 이용을 할 수 있다.
                 클라우드에서 일하려면 최소한 읽거나 설정할 필요도 있고, 리눅스에 의해 C++말고도 러스트도 해야할 필요가 있다.

   